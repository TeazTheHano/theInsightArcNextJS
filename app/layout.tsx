"use client"

import type { Metadata } from "next";
// import "./globals.css";
import "../styles/index.scss"
import { ThemeProvider, useTheme } from "@/hooks/useTheme";
import { useEffect, useState } from "react";
import NavigationUnit from "@/components/NavigationUnit/NavigationUnit";
import Divider from "@/components/Divider/Divider";
import Footer from "@/components/HeaderAndFooter/Footer";
import CircleFollowMouse from "@/components/CircleFollowMouse/CircleFollowMouse";
import styles from './rootLayout.module.css'
import { ModalProvider } from "@/hooks/useModal";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const { resolvedTheme } = useTheme(); // Lấy theme và setTheme từ Context

  const [sizeAndSpacing, setSizeAndSpacing] = useState<'sm' | 'md' | 'lg' | 'xl'>('md');

  // Apply size and spacing class to body
  useEffect(() => {
    function updateSizeAndSpacing() {
      if (window.innerWidth < 768) {
        setSizeAndSpacing('sm');
      } else if (window.innerWidth < 1024) {
        setSizeAndSpacing('md');
      } else if (window.innerWidth < 1440) {
        setSizeAndSpacing('lg');
      } else {
        setSizeAndSpacing('xl');
      }
    }

    updateSizeAndSpacing();
    window.addEventListener('resize', updateSizeAndSpacing);
    return () => window.removeEventListener('resize', updateSizeAndSpacing);
  }, []);

  useEffect(() => {
    document.body.classList.remove('size-and-spacing-sm', 'size-and-spacing-md', 'size-and-spacing-lg', 'size-and-spacing-xl');
    document.body.classList.add(`size-and-spacing-${sizeAndSpacing}`);
    localStorage.setItem('size-and-spacing', `size-and-spacing-${sizeAndSpacing}`)
  }, [sizeAndSpacing]);

  useEffect(() => {
    const labelElement = document.querySelector(`.App`);
    if (labelElement) {
      const computedStyle = getComputedStyle(labelElement);
      document.body.style.setProperty('background-color', computedStyle.backgroundColor);
    }
  }, [resolvedTheme]);


  return (
    <ThemeProvider>
      <html lang="en">
        <body
          // className={`${geistSans.variable} ${geistMono.variable} antialiased`}
          className={`App theme-${resolvedTheme} size-and-spacing-${sizeAndSpacing} ${styles.appLayout}`} style={{ backgroundColor: 'var(--Schemes-Surface)' }}
        >
          {/* Thanh điều hướng */}
          <NavigationUnit />

          {/* Content */}
          <div className={styles.contentContainerLayout}>
            <main>
              <ModalProvider>
                {children}
              </ModalProvider>
            </main>

            <Divider />
            <Footer />
          </div>

          {/* Circle that follows the mouse */}
          {
            resolvedTheme === 'dark' ?
              <CircleFollowMouse /> : null
          }
        </body>
      </html>
    </ThemeProvider>
  );
}
